// Copyright 2021 University of Nottingham Ningbo China
// Author: Filippo Savi <filssavi@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
`timescale 10 ns / 1 ns
`include "interfaces.svh"

module enable_generator_{{n_enables}} #(
    parameter ADDRESS_MASK = 'hffffffff,
    COUNTER_WIDTH = 32
)(
    input wire        clock,
    input wire        reset,
    input wire        ext_timebase,
    input wire        gen_enable_in,
    {%- for i in range(n_enables) %}
    output wire enable_out_{{i+1}},
    {%- endfor %}
    axi_lite.slave axil
);

    reg [COUNTER_WIDTH-1:0] period;
    wire [COUNTER_WIDTH-1:0] count;

    reg bus_enable;
    {% for i in range(n_enables) %}
    reg [COUNTER_WIDTH-1:0] enable_threshold_{{i+1}};
    {%- endfor %}



    reg [31:0] cu_write_registers [{{n_enables+1}}:0];
    reg [31:0] cu_read_registers [{{n_enables+1}}:0];

    localparam ADDITIONAL_BITS = 32 - COUNTER_WIDTH;

    axil_simple_register_cu #(
        .N_READ_REGISTERS({{n_enables+2}}),
        .N_WRITE_REGISTERS({{n_enables+2}}),
        .REGISTERS_WIDTH(32),
        .ADDRESS_MASK(ADDRESS_MASK)
    ) CU (
        .clock(clock),
        .reset(reset),
        .input_registers(cu_read_registers),
        .output_registers(cu_write_registers),
        .axil(axil)
    );



    assign bus_enable = cu_write_registers[0][0];
    assign period = cu_write_registers[1][COUNTER_WIDTH-1:0];
    {%- for i in range(n_enables) %}
    assign enable_threshold_{{i+1}} = cu_write_registers[{{i+2}}][COUNTER_WIDTH-1:0];
    {%- endfor %}

    assign cu_read_registers[0][31:0] = {{"{31'b0, {bus_enable}}"}};
    assign cu_read_registers[1][31:0] = {{"{{ADDITIONAL_BITS{1'b0}},period}"}};
    {%- for i in range(n_enables) %}
    assign cu_read_registers[{{2+i}}][31:0] = {{"{{ADDITIONAL_BITS{1'b0}}"}},enable_threshold_{{i+1}}};
    {%- endfor %}

    enable_generator_counter counter(
        .clock(clock),
        .reset(reset),
        .external_timebase(ext_timebase),
        .gen_enable_in(bus_enable | gen_enable_in),
        .period(period),
        .counter_out(count)
    );
    {% for i in range(n_enables) %}
    enable_comparator #(
        .COUNTER_WIDTH(COUNTER_WIDTH)
    ) comparator_{{i+1}}(
        .clock(clock),
        .reset(reset),
        .enable_treshold(enable_threshold_{{i+1}}),
        .count(count),
        .enable_out(enable_out_{{i+1}})
    );
    {% endfor %}



endmodule